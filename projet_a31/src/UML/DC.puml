@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class MastermindApp{
    + {static} main(args : String[])
}

' ICI METTRE QUE LE MastermindApp INSTANCIE LES CLASSES ETC...


package view{
    class View_start_game{
        + <<Create>>View_start_game()
    }

    class MastermindGameDisplay implements RoundObserver{
        + <<Create>>MastermindGameDisplay()
    }

    class View_end_game{
        + <<Create>>View_end_game()
    }

    interface RoundObserver{

    }
}

package model{
    class MastermindGame {
    - _playerName : String
    - _gameMode : String
    - _numberOfRounds : Integer
    - _pawnNumber : Integer
    - _combinaisonNumber : Integer
    - _tryNumber : Integer

      + startGame()
      + makeSecretCombination()
      + isGameOver(): Boolean
      + getScore(): Integer
    }

    class Round {
      + calculateScore(): Integer
    }

    class Combination{
        + <<Create>> Combination()
        + addPawn(pawn : PawnColor)
        + removePawn(pawn : PawnColor)
        + generateClues()
    }

    interface GenerateCluesStrategy
    {
        + generateClues() : String
    }

    Combination o-- "1\n-generateCluesStrategy" GenerateCluesStrategy : has >

    class GenerateCluesEasy implements GenerateCluesStrategy
    {
        + <<Create>> GenerateCluesEasy()
        + generateClues() : String
    }

    class GenerateCluesClassic implements GenerateCluesStrategy
    {
        + <<Create>> GenerateCluesClassic()
        + generateClues() : String
    }

    class GenerateCluesNumerical implements GenerateCluesStrategy
        {
            + <<Create>> GenerateCluesNumerical()
            + generateClues() : String
        }


    class Clue{
        + <<Create>> Clue()
    }


    enum PawnColor{
        RED
        ORANGE
        BLUE
        GREEN
    }


}

package controller{
    class RoundController{
        + <<Create>> RoundController(mastermindGame : MastermindGame)

        + makeSecretCombination()
        + addPawn(numCombination : Integer, pawn : PawnColor)
        + removePawn(numCombination : Integer, pawn : PawnColor)
        + generateClues(numCombination : Integer)
    }
}

MastermindGameDisplay --"1\n-roundController" RoundController : send user request >


RoundController --"1\n-round" Round : edit >



RoundObserver ---"1\n-round" Round : observes >



MastermindGame --"*\n-rounds" Round : has >
MastermindGame --"1\n-secretCombination" Combination : has >





Combination ---"*\n-clues" Clue : has >

Combination ---"*\npawns" PawnColor : contains >

Round --> "*\n-attempts" Combination

@enduml

